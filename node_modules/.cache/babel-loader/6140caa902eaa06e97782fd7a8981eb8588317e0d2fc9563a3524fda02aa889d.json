{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\Enzigma\\\\to-do-list-app\\\\src\\\\component\\\\TaskForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';  \n\n// const TaskForm = () => {  \n//   const [newTask, setNewTask] = useState({  \n//    assignedTo: '',  \n//    status: '',  \n//    dueDate: '',  \n//    priority: '',  \n//    comments: ''  \n//   });  \n\n//   const handleNewTask = (event) => {  \n//    setNewTask({ ...newTask, [event.target.name]: event.target.value });  \n//   };  \n\n//   const handleSubmitNewTask = (event) => {  \n//    event.preventDefault();  \n//    // Call Task Service to create new task  \n//    console.log(newTask);  \n//   };  \n\n//   return (  \n//    <form onSubmit={handleSubmitNewTask}>  \n//     <label>  \n//       Assigned To:  \n//       <input  \n//        type=\"text\"  \n//        name=\"assignedTo\"  \n//        value={newTask.assignedTo}  \n//        onChange={handleNewTask}  \n//       />  \n//     </label>  \n//     <label>  \n//       Status:  \n//       <select  \n//        name=\"status\"  \n//        value={newTask.status}  \n//        onChange={handleNewTask}  \n//       >  \n//        <option value=\"\">Select Status</option>  \n//        <option value=\"Not Started\">Not Started</option>  \n//        <option value=\"In Progress\">In Progress</option>  \n//        <option value=\"Completed\">Completed</option>  \n//       </select>  \n//     </label>  \n//     <label>  \n//       Due Date:  \n//       <input  \n//        type=\"date\"  \n//        name=\"dueDate\"  \n//        value={newTask.dueDate}  \n//        onChange={handleNewTask}  \n//       />  \n//     </label>  \n//     <label>  \n//       Priority:  \n//       <select  \n//        name=\"priority\"  \n//        value={newTask.priority}  \n//        onChange={handleNewTask}  \n//       >  \n//        <option value=\"\">Select Priority</option>  \n//        <option value=\"Low\">Low</option>  \n//        <option value=\"Medium\">Medium</option>  \n//        <option value=\"High\">High</option>  \n//       </select>  \n//     </label>  \n//     <label>  \n//       Comments:  \n//       <textarea  \n//        name=\"comments\"  \n//        value={newTask.comments}  \n//        onChange={handleNewTask}  \n//       />  \n//     </label>  \n//     <button type=\"submit\">Create New Task</button>  \n//    </form>  \n//   );  \n// };  \n\n// export default TaskForm;\n\n// src/components/Modal.js\n// import React from 'react';\n// import './TaskForm.css';\n\n// const TaskForm = ({ isOpen, onClose, onSubmit }) => {\n//   if (!isOpen) return null;\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Handle form submission logic here\n//     onSubmit(); // Call onSubmit to handle the submission\n//     onClose(); // Close the modal after submission\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>X</button>\n//         <h2>Add New Task</h2>\n//         <form onSubmit={handleSubmit}>\n//           <input type=\"text\" placeholder=\"Assigned To\" required />\n//           <input type=\"text\" placeholder=\"Status\" required />\n//           <input type=\"date\" placeholder=\"Due Date\" required />\n//           <input type=\"text\" placeholder=\"Priority\" required />\n//           <textarea placeholder=\"Comments\" required></textarea>\n//           <button type=\"submit\">Submit</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskForm;\n\nimport React, { useState } from 'react';\nimport './TaskForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  isOpen,\n  onClose,\n  onSubmit\n}) => {\n  _s();\n  const [assignedTo, setAssignedTo] = useState('');\n  const [status, setStatus] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [priority, setPriority] = useState('');\n  const [comments, setComments] = useState('');\n  if (!isOpen) return null;\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newTask = {\n      assignedTo,\n      status,\n      dueDate,\n      priority,\n      comments\n    };\n    onSubmit(newTask); // Pass the new task object to the onSubmit function\n    onClose(); // Close the modal after submission\n    // Clear the form\n    setAssignedTo('');\n    setStatus('');\n    setDueDate('');\n    setPriority('');\n    setComments('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Assigned To\",\n          value: assignedTo,\n          onChange: e => setAssignedTo(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Status\",\n          value: status,\n          onChange: e => setStatus(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: dueDate,\n          onChange: e => setDueDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Priority\",\n          value: priority,\n          onChange: e => setPriority(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Comments\",\n          value: comments,\n          onChange: e => setComments(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskForm, \"MzQrrbedn62Wzkc5XvSfh5M3Luw=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TaskForm","isOpen","onClose","onSubmit","_s","assignedTo","setAssignedTo","status","setStatus","dueDate","setDueDate","priority","setPriority","comments","setComments","handleSubmit","e","preventDefault","newTask","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/Enzigma/to-do-list-app/src/component/TaskForm.js"],"sourcesContent":["// import React, { useState } from 'react';  \r\n  \r\n// const TaskForm = () => {  \r\n//   const [newTask, setNewTask] = useState({  \r\n//    assignedTo: '',  \r\n//    status: '',  \r\n//    dueDate: '',  \r\n//    priority: '',  \r\n//    comments: ''  \r\n//   });  \r\n  \r\n//   const handleNewTask = (event) => {  \r\n//    setNewTask({ ...newTask, [event.target.name]: event.target.value });  \r\n//   };  \r\n  \r\n//   const handleSubmitNewTask = (event) => {  \r\n//    event.preventDefault();  \r\n//    // Call Task Service to create new task  \r\n//    console.log(newTask);  \r\n//   };  \r\n  \r\n//   return (  \r\n//    <form onSubmit={handleSubmitNewTask}>  \r\n//     <label>  \r\n//       Assigned To:  \r\n//       <input  \r\n//        type=\"text\"  \r\n//        name=\"assignedTo\"  \r\n//        value={newTask.assignedTo}  \r\n//        onChange={handleNewTask}  \r\n//       />  \r\n//     </label>  \r\n//     <label>  \r\n//       Status:  \r\n//       <select  \r\n//        name=\"status\"  \r\n//        value={newTask.status}  \r\n//        onChange={handleNewTask}  \r\n//       >  \r\n//        <option value=\"\">Select Status</option>  \r\n//        <option value=\"Not Started\">Not Started</option>  \r\n//        <option value=\"In Progress\">In Progress</option>  \r\n//        <option value=\"Completed\">Completed</option>  \r\n//       </select>  \r\n//     </label>  \r\n//     <label>  \r\n//       Due Date:  \r\n//       <input  \r\n//        type=\"date\"  \r\n//        name=\"dueDate\"  \r\n//        value={newTask.dueDate}  \r\n//        onChange={handleNewTask}  \r\n//       />  \r\n//     </label>  \r\n//     <label>  \r\n//       Priority:  \r\n//       <select  \r\n//        name=\"priority\"  \r\n//        value={newTask.priority}  \r\n//        onChange={handleNewTask}  \r\n//       >  \r\n//        <option value=\"\">Select Priority</option>  \r\n//        <option value=\"Low\">Low</option>  \r\n//        <option value=\"Medium\">Medium</option>  \r\n//        <option value=\"High\">High</option>  \r\n//       </select>  \r\n//     </label>  \r\n//     <label>  \r\n//       Comments:  \r\n//       <textarea  \r\n//        name=\"comments\"  \r\n//        value={newTask.comments}  \r\n//        onChange={handleNewTask}  \r\n//       />  \r\n//     </label>  \r\n//     <button type=\"submit\">Create New Task</button>  \r\n//    </form>  \r\n//   );  \r\n// };  \r\n  \r\n// export default TaskForm;\r\n\r\n\r\n// src/components/Modal.js\r\n// import React from 'react';\r\n// import './TaskForm.css';\r\n\r\n// const TaskForm = ({ isOpen, onClose, onSubmit }) => {\r\n//   if (!isOpen) return null;\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     // Handle form submission logic here\r\n//     onSubmit(); // Call onSubmit to handle the submission\r\n//     onClose(); // Close the modal after submission\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"modal-overlay\">\r\n//       <div className=\"modal-content\">\r\n//         <button className=\"close-button\" onClick={onClose}>X</button>\r\n//         <h2>Add New Task</h2>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <input type=\"text\" placeholder=\"Assigned To\" required />\r\n//           <input type=\"text\" placeholder=\"Status\" required />\r\n//           <input type=\"date\" placeholder=\"Due Date\" required />\r\n//           <input type=\"text\" placeholder=\"Priority\" required />\r\n//           <textarea placeholder=\"Comments\" required></textarea>\r\n//           <button type=\"submit\">Submit</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskForm;\r\n\r\nimport React, { useState } from 'react';\r\nimport './TaskForm.css';\r\n\r\nconst TaskForm = ({ isOpen, onClose, onSubmit }) => {\r\n  const [assignedTo, setAssignedTo] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [dueDate, setDueDate] = useState('');\r\n  const [priority, setPriority] = useState('');\r\n  const [comments, setComments] = useState('');\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    const newTask = {\r\n      assignedTo,\r\n      status,\r\n      dueDate,\r\n      priority,\r\n      comments,\r\n    };\r\n\r\n    onSubmit(newTask); // Pass the new task object to the onSubmit function\r\n    onClose(); // Close the modal after submission\r\n    // Clear the form\r\n    setAssignedTo('');\r\n    setStatus('');\r\n    setDueDate('');\r\n    setPriority('');\r\n    setComments('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <button className=\"close-button\" onClick={onClose}>X</button>\r\n        <h2>Add New Task</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Assigned To\"\r\n            value={assignedTo}\r\n            onChange={(e) => setAssignedTo(e.target.value)}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Status\"\r\n            value={status}\r\n            onChange={(e) => setStatus(e.target.value)}\r\n            required\r\n          />\r\n          <input\r\n            type=\"date\"\r\n            value={dueDate}\r\n            onChange={(e) => setDueDate(e.target.value)}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Priority\"\r\n            value={priority}\r\n            onChange={(e) => setPriority(e.target.value)}\r\n            required\r\n          />\r\n          <textarea\r\n            placeholder=\"Comments\"\r\n            value={comments}\r\n            onChange={(e) => setComments(e.target.value)}\r\n            required\r\n          ></textarea>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}